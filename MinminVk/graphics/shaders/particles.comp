#version 450

// TODO for hair
// prev position buffer
// initial position buffer
// position vec2 -> vec3, update graphics shaders


struct Particle {
	vec2 position;
	vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

float gravityMag = 9.8f;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    vec2 force = gravityMag * vec2(0.f, 1.f);
    vec2 curPos = particleIn.position;
    vec2 oldPos = particlesOut[index].position;
    float decay = exp(-1.f * ubo.deltaTime * 60.f);
    vec2 newPos = particleIn.position + (curPos - oldPos) * decay + force * ubo.deltaTime * ubo.deltaTime;

    particlesOut[index].position = newPos;

    /**
    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    // Flip movement at window border
    if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
        particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
    }
    if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
        particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    }
    */

}