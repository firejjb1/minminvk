#version 450

// https://github.com/godotengine/godot/blob/master/servers/rendering/renderer_rd/shaders/skeleton.glsl 

// skinning 
// inputs: 
// initial vertex buffer (position, normal, tangent)
// joint transforms
// outputs:
// new vertex position
// new normals
// new tangents

// morphing
// inputs:
// morph targets (position, normal, uv) 
// weights 
//outputs:
// new vertex buffer

layout(set = 0, binding = 0, std430) readonly buffer SrcVertexData {
	uint data[];
}
src_vertices;

layout(set = 0, binding = 1, std430) buffer DstVertexData {
	uint data[];
}
dst_vertices;


layout(set = 0, binding = 2, std430) readonly buffer BoneWeightData {
	uint data[];
}
src_bone_weights;


layout(set = 0, binding = 3) uniform SkeletonData {
	mat4 data[128];
}
bone_transforms;

layout(set = 0, binding = 4) uniform BlendShapeWeights {
	vec4 data[2];
}
blend_shape_weights;

layout(set = 0, binding = 5, std430) readonly buffer  BlendShapeData {
	uint data[];
}
src_blend_shapes;

layout(push_constant) uniform Params {
	bool has_normal;
	bool has_tangent;
	bool has_skeleton;
	bool has_blend_shape;

	uint vertex_count;
	uint vertex_stride;
	uint skin_stride;
	uint skin_weight_offset;

	uint blend_shape_count;
	bool normalized_blend_shapes;
	uint blend_weight_stride;
	uint pad1;

//	vec2 skeleton_transform_x;
//	vec2 skeleton_transform_y;

//	vec2 skeleton_transform_offset;
//	vec2 inverse_transform_x;

//	vec2 inverse_transform_y;
//	vec2 inverse_transform_offset;
}
params;


layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main() 
{
// vertex data (all padded to vec4) 80 bytes total
// vec3 pos;
// vec3 color = vec3(1);
// vec2 texCoord;
// vec3 normal = vec3(0,0,1);
// vec4 tangent = vec4(0);

	uint index = gl_GlobalInvocationID.x;
	if (index >= params.vertex_count) {
		return;
	}

	uint src_offset = index * params.vertex_stride;

	vec3 vertex;
	vec3 normal;
	vec4 tangent;

	vertex = uintBitsToFloat(uvec3(src_vertices.data[src_offset + 0], src_vertices.data[src_offset + 1], src_vertices.data[src_offset + 2]));
	normal = uintBitsToFloat(uvec3(src_vertices.data[src_offset + 12], src_vertices.data[src_offset + 13], src_vertices.data[src_offset + 14]));
	tangent = uintBitsToFloat(uvec4(src_vertices.data[src_offset + 16], src_vertices.data[src_offset + 17], src_vertices.data[src_offset + 18], src_vertices.data[src_offset + 19]));
	

	if (params.has_blend_shape)
	{
		float blend_total = 0.0;
		vec3 blend_vertex = vec3(0.0);
		vec3 blend_normal = vec3(0.0);
		vec3 blend_tangent = vec3(0.0);

		for (int i = 0; i < params.blend_shape_count; ++i)
		{
			float w = blend_shape_weights.data[i/4][i%4];
			if (abs(w) > 0.00001)
			{
				uint base_offset = params.vertex_count * i * params.blend_weight_stride + index * params.blend_weight_stride;
				blend_vertex += uintBitsToFloat(uvec3(src_blend_shapes.data[base_offset + 0], src_blend_shapes.data[base_offset + 1], src_blend_shapes.data[base_offset + 2])) * w;
				if (params.has_normal)
				{
					blend_normal += uintBitsToFloat(uvec3(src_blend_shapes.data[base_offset + 4], src_blend_shapes.data[base_offset + 5], src_blend_shapes.data[base_offset + 6])) * w;

				}
				if (params.has_tangent)
				{
					blend_normal += uintBitsToFloat(uvec3(src_blend_shapes.data[base_offset + 8], src_blend_shapes.data[base_offset + 9], src_blend_shapes.data[base_offset + 10])) * w;
				}
			}
		}
		vertex += blend_vertex;
		normal = normalize(normal + blend_normal);
		tangent.rgb = normalize(tangent.rgb + blend_tangent);
	}

	if (params.has_skeleton)
	{
		uint skin_offset = params.skin_stride * index;
		uvec4 bones = uvec4(src_bone_weights.data[skin_offset + 0], src_bone_weights.data[skin_offset + 1], src_bone_weights.data[skin_offset + 2], src_bone_weights.data[skin_offset + 3]);
		skin_offset += params.skin_weight_offset;
		vec4 weights = uintBitsToFloat(uvec4(src_bone_weights.data[skin_offset + 0], src_bone_weights.data[skin_offset + 1], src_bone_weights.data[skin_offset + 2], src_bone_weights.data[skin_offset + 3]));
		
		mat4 skinMatrix =
			weights.x * bone_transforms.data[int(bones.x)] +
			weights.y * bone_transforms.data[int(bones.y)] +
			weights.z * bone_transforms.data[int(bones.z)] +
			weights.w * bone_transforms.data[int(bones.w)];


		vertex = (skinMatrix * vec4(vertex, 1.0)).xyz;
		normal = normalize((skinMatrix * vec4(normal, 0.0)).xyz);
		tangent.xyz = normalize((skinMatrix * vec4(tangent.xyz, 0.0)).xyz);
	}

	uint dst_offset = index * params.vertex_stride;

	uvec3 uvertex = floatBitsToUint(vertex);
	dst_vertices.data[dst_offset + 0] = uvertex.x;
	dst_vertices.data[dst_offset + 1] = uvertex.y;
	dst_vertices.data[dst_offset + 2] = uvertex.z;

	uvec3 unormal = floatBitsToUint(normal);
	dst_vertices.data[dst_offset + 12] = unormal.x;
	dst_vertices.data[dst_offset + 13] = unormal.y;
	dst_vertices.data[dst_offset + 14] = unormal.z;
	
	uvec4 utangent = floatBitsToUint(tangent);
	dst_vertices.data[dst_offset + 16] = utangent.x;
	dst_vertices.data[dst_offset + 17] = utangent.y;
	dst_vertices.data[dst_offset + 18] = utangent.z;
	dst_vertices.data[dst_offset + 19] = utangent.z;

}